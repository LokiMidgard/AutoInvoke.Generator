using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using VerifyCS = AutoInvoke.Generator.UnitTests.Verifiers.CSharpSourceGeneratorVerifier<AutoInvoke.Generator.InvokeGenerator>;

namespace AutoInvoke.Generator.UnitTests;
[TestClass]
public class HelloWorldGeneratorUnitTests {
    private const string Attribute = @"// <auto-generated/>
#nullable enable

namespace AutoInvoke;
[System.AttributeUsage(System.AttributeTargets.Method, Inherited = false, AllowMultiple = true)]
[System.Diagnostics.Conditional(""AutoNotifyGenerator_DEBUG"")]
internal sealed class FindAndInvokeAttribute : System.Attribute
{
#pragma warning disable CS0169 // Remove unused parameter

#pragma warning disable IDE0060 // Remove unused parameter

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

    public FindAndInvokeAttribute()
    {
    }

    public FindAndInvokeAttribute(string pattern)
    {
    }

    public FindAndInvokeAttribute(System.Type type)
    {
    }

    public string MethodName { get; set; }
    public bool CallForAbstractClasses { get; set; }
    public bool CallForInterfaces { get; set; }
    public bool CallForStructs { get; set; }
    public bool CallForClasses { get; set; }
    public bool CallForRecords { get; set; }
#pragma warning restore CS0169 // Remove unused parameter

#pragma warning restore IDE0060 // Remove unused parameter

#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

}";

    [TestMethod]
    public async Task GenerateSynchron() {
        string code = @"
using System;
namespace T1.T2;
internal static partial class GlobalNamespaceGreeter {
	[AutoInvoke.FindAndInvoke]
	public static void GetHelloWorld<T>() where T : Foo {
		
	}
}

class Foo {}
class Bar :Foo {}


";

        string global = @"// <auto-generated/>
#nullable enable
namespace T1.T2;
partial class GlobalNamespaceGreeter {
    private static void GetHelloWorld() {
        GetHelloWorld<T1.T2.Foo>();
        GetHelloWorld<T1.T2.Bar>();
    }
}
";
        await VerifyCS.VerifyGeneratorAsync(code, ("attribute.g.cs", Attribute),
            ("T1.T2.class.GetHelloWorld.g.cs", global)
            );
    }

    [TestMethod]
    public async Task GenerateAsync() {
        string code = @"
using System;
namespace T1.T2;
internal static partial class GlobalNamespaceGreeter
{
	[AutoInvoke.FindAndInvoke]
	public static System.Threading.Tasks.Task GetHelloWorld<T>() where T : Foo {
		return System.Threading.Tasks.Task.CompletedTask;
	}
}

class Foo {}
class Bar :Foo {}


";

        string global = @"// <auto-generated/>
#nullable enable
namespace T1.T2;
partial class GlobalNamespaceGreeter {
    private static async System.Threading.Tasks.Task GetHelloWorld() {
        await System.Threading.Tasks.Task.WhenAll(GetHelloWorld<T1.T2.Foo>(), GetHelloWorld<T1.T2.Bar>());
    }
}
";
        await VerifyCS.VerifyGeneratorAsync(code, ("attribute.g.cs", Attribute),
            ("T1.T2.class.GetHelloWorld.g.cs", global)
            );
    }

    [TestMethod]
    public async Task DoNotGenerateAbstract() {
        string code = @"
using System;
namespace T1.T2;
internal static partial class GlobalNamespaceGreeter
{
	[AutoInvoke.FindAndInvoke]
	public static void GetHelloWorld<T>() where T : Foo {
		
	}
}

abstract class Foo {}
class Bar : Foo{}


";

        string global = @"// <auto-generated/>
#nullable enable
namespace T1.T2;
partial class GlobalNamespaceGreeter {
    private static void GetHelloWorld() {
        GetHelloWorld<T1.T2.Bar>();
    }
}
";
        await VerifyCS.VerifyGeneratorAsync(code, ("attribute.g.cs", Attribute),
            ("T1.T2.class.GetHelloWorld.g.cs", global)
            );
    }
    [TestMethod]
    public async Task DoNotGenerateStatic() {
        string code = @"
using System;
namespace T1.T2;
internal static partial class GlobalNamespaceGreeter
{
	[AutoInvoke.FindAndInvoke]
	public static void GetHelloWorld<T>() {
		
	}
}

static class Foo {}
class Bar {}


";

        string global = @"// <auto-generated/>
#nullable enable
namespace T1.T2;
partial class GlobalNamespaceGreeter {
    private static void GetHelloWorld() {
        GetHelloWorld<T1.T2.Bar>();
        GetHelloWorld<AutoInvoke.FindAndInvokeAttribute>();
    }
}
";
        await VerifyCS.VerifyGeneratorAsync(code, ("attribute.g.cs", Attribute),
            ("T1.T2.class.GetHelloWorld.g.cs", global)
            );
    }
}
